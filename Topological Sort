class Solution
{
    public static void dfs(ArrayList<ArrayList<Integer>> adj, int s, boolean[] vis, Stack<Integer> st) {
        vis[s] = true;

        for (int i : adj.get(s)) {
            if (!vis[i]) {
                dfs(adj, i, vis, st);
            }
        }
        st.push(s);
    }
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        boolean[] vis = new boolean[V];
        Stack<Integer> st = new Stack<>();

        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                dfs(adj, i, vis, st);
            }
        }

        int[] result = new int[V];
        int index = 0;
        while (!st.isEmpty()) {
            result[index++] = st.pop();
        }
        return result;
    }
}
